diff --git a/src/main/java/spark/resource/ClassPathResourceHandler.java b/src/main/java/spark/resource/ClassPathResourceHandler.java
index 03b2932b93..67a6735d64 100644
--- a/src/main/java/spark/resource/ClassPathResourceHandler.java
+++ b/src/main/java/spark/resource/ClassPathResourceHandler.java
@@ -70,8 +70,6 @@ protected AbstractFileResolvingResource getResource(String path) throws Malforme
 
             ClassPathResource resource = new ClassPathResource(addedPath);
 
-            DirectoryTraversal.protectAgainstInClassPath(resource.getPath());
-
             if (resource.exists() && resource.getFile().isDirectory()) {
                 if (welcomeFile != null) {
                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
@@ -81,7 +79,13 @@ protected AbstractFileResolvingResource getResource(String path) throws Malforme
                 }
             }
 
-            return (resource != null && resource.exists()) ? resource : null;
+            if (resource != null && resource.exists()) {
+                DirectoryTraversal.protectAgainstInClassPath(resource.getPath());
+                return resource;
+            } else {
+                return null;
+            }
+
         } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {
             throw directoryTraversalDetection;
         } catch (Exception e) {
diff --git a/src/main/java/spark/resource/ExternalResourceHandler.java b/src/main/java/spark/resource/ExternalResourceHandler.java
index e341396144..8e5df90ed9 100644
--- a/src/main/java/spark/resource/ExternalResourceHandler.java
+++ b/src/main/java/spark/resource/ExternalResourceHandler.java
@@ -69,8 +69,6 @@ protected AbstractFileResolvingResource getResource(String path) throws Malforme
 
             ExternalResource resource = new ExternalResource(addedPath);
 
-            DirectoryTraversal.protectAgainstForExternal(resource.getPath());
-
             if (resource.exists() && resource.isDirectory()) {
                 if (welcomeFile != null) {
                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
@@ -80,7 +78,13 @@ protected AbstractFileResolvingResource getResource(String path) throws Malforme
                 }
             }
 
-            return (resource != null && resource.exists()) ? resource : null;
+            if (resource != null && resource.exists()) {
+                DirectoryTraversal.protectAgainstForExternal(resource.getPath());
+                return resource;
+            } else {
+                return null;
+            }
+
         } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {
             throw directoryTraversalDetection;
         } catch (Exception e) {
diff --git a/src/main/java/spark/staticfiles/DirectoryTraversal.java b/src/main/java/spark/staticfiles/DirectoryTraversal.java
index a3b71750f4..9f26fcc8ad 100644
--- a/src/main/java/spark/staticfiles/DirectoryTraversal.java
+++ b/src/main/java/spark/staticfiles/DirectoryTraversal.java
@@ -1,24 +1,30 @@
 package spark.staticfiles;
 
+import static spark.utils.StringUtils.removeLeadingAndTrailingSlashesFrom;
+
 /**
  * Protecting against Directory traversal
  */
 public class DirectoryTraversal {
 
     public static void protectAgainstInClassPath(String path) {
-        if (!path.startsWith(StaticFilesFolder.local())) {
-            throw new DirectoryTraversalDetection();
+        if (!removeLeadingAndTrailingSlashesFrom(path).startsWith(StaticFilesFolder.local())) {
+            throw new DirectoryTraversalDetection("classpath");
         }
     }
 
     public static void protectAgainstForExternal(String path) {
-        if (!path.startsWith(StaticFilesFolder.external())) {
-            throw new DirectoryTraversalDetection();
+        if (!removeLeadingAndTrailingSlashesFrom(path).startsWith(StaticFilesFolder.external())) {
+            throw new DirectoryTraversalDetection("external");
         }
     }
 
     public static final class DirectoryTraversalDetection extends RuntimeException {
 
+        public DirectoryTraversalDetection(String msg) {
+            super(msg);
+        }
+
     }
 
 }
diff --git a/src/main/java/spark/staticfiles/StaticFilesConfiguration.java b/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
index 1e997272e0..c714db1fdc 100644
--- a/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
+++ b/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
@@ -78,7 +78,8 @@ public boolean consume(HttpServletRequest httpRequest,
                 return true;
             }
         } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {
-            LOG.warn("directoryTraversalDetection for path: " + httpRequest.getPathInfo());
+            LOG.warn(directoryTraversalDetection.getMessage() + " directory traversal detection for path: "
+                             + httpRequest.getPathInfo());
         }
         return false;
     }
diff --git a/src/main/java/spark/staticfiles/StaticFilesFolder.java b/src/main/java/spark/staticfiles/StaticFilesFolder.java
index 9554711e05..a77278cf5f 100644
--- a/src/main/java/spark/staticfiles/StaticFilesFolder.java
+++ b/src/main/java/spark/staticfiles/StaticFilesFolder.java
@@ -1,5 +1,7 @@
 package spark.staticfiles;
 
+import static spark.utils.StringUtils.removeLeadingAndTrailingSlashesFrom;
+
 /**
  * Created by Per Wendel on 2016-11-05.
  */
@@ -9,15 +11,13 @@ public class StaticFilesFolder {
     private static volatile String external;
 
     public static final void localConfiguredTo(String folder) {
-        local = folder;
 
-        if (local.startsWith("/")) {
-            local = local.substring(1);
-        }
+        local = removeLeadingAndTrailingSlashesFrom(folder);
     }
 
     public static final void externalConfiguredTo(String folder) {
-        external = folder;
+
+        external = removeLeadingAndTrailingSlashesFrom(folder);
     }
 
     public static final String local() {
diff --git a/src/main/java/spark/utils/StringUtils.java b/src/main/java/spark/utils/StringUtils.java
index adf10df772..06385abdec 100644
--- a/src/main/java/spark/utils/StringUtils.java
+++ b/src/main/java/spark/utils/StringUtils.java
@@ -390,4 +390,19 @@ public static String toString(byte[] bytes, String encoding) {
         return str;
     }
 
+    public static String removeLeadingAndTrailingSlashesFrom(String string) {
+        
+        String trimmed = string;
+
+        if (trimmed.endsWith("/") || trimmed.endsWith("\\")) {
+            trimmed = trimmed.substring(0, trimmed.length() - 1);
+        }
+
+        if (trimmed.startsWith("/")) {
+            trimmed = trimmed.substring(1);
+        }
+
+        return trimmed;
+    }
+
 }
diff --git a/src/test/java/spark/StaticFilesTest.java b/src/test/java/spark/StaticFilesTest.java
index f5c4aa8660..e09130ac68 100644
--- a/src/test/java/spark/StaticFilesTest.java
+++ b/src/test/java/spark/StaticFilesTest.java
@@ -69,7 +69,6 @@ public static void setup() throws IOException {
         testUtil = new SparkTestUtil(4567);
 
         tmpExternalFile = new File(System.getProperty("java.io.tmpdir"), EXTERNAL_FILE_NAME_HTML);
-        System.out.println("externalFileFolder = " + System.getProperty("java.io.tmpdir"));
 
         FileWriter writer = new FileWriter(tmpExternalFile);
         writer.write(CONTENT_OF_EXTERNAL_FILE);
diff --git a/src/test/java/spark/StaticFilesTestExternal.java b/src/test/java/spark/StaticFilesTestExternal.java
index 73fc454bfc..22c71dc794 100644
--- a/src/test/java/spark/StaticFilesTestExternal.java
+++ b/src/test/java/spark/StaticFilesTestExternal.java
@@ -51,14 +51,18 @@ public class StaticFilesTestExternal {
 
     private static SparkTestUtil testUtil;
 
-    private static File tmpExternalFile;
+    private static File tmpExternalFile1;
+    private static File tmpExternalFile2;
+    private static File folderOutsideStaticFiles;
 
     @AfterClass
     public static void tearDown() {
         Spark.stop();
-        if (tmpExternalFile != null) {
-            LOGGER.debug("tearDown().deleting: " + tmpExternalFile);
-            tmpExternalFile.delete();
+        if (tmpExternalFile1 != null) {
+            LOGGER.debug("tearDown(). Deleting tmp files");
+            tmpExternalFile1.delete();
+            tmpExternalFile2.delete();
+            folderOutsideStaticFiles.delete();
         }
     }
 
@@ -66,15 +70,26 @@ public static void tearDown() {
     public static void setup() throws IOException {
         testUtil = new SparkTestUtil(4567);
 
-        tmpExternalFile = new File(System.getProperty("java.io.tmpdir"), EXTERNAL_FILE_NAME_HTML);
-        System.out.println("externalFileFolder = " + System.getProperty("java.io.tmpdir"));
+        String directoryRoot = System.getProperty("java.io.tmpdir") + "sparkish";
+        new File(directoryRoot).mkdirs();
 
-        FileWriter writer = new FileWriter(tmpExternalFile);
+        tmpExternalFile1 = new File(directoryRoot, EXTERNAL_FILE_NAME_HTML);
+
+        FileWriter writer = new FileWriter(tmpExternalFile1);
         writer.write(CONTENT_OF_EXTERNAL_FILE);
         writer.flush();
         writer.close();
 
-        externalStaticFileLocation(System.getProperty("java.io.tmpdir"));
+        File root = new File(directoryRoot);
+
+        folderOutsideStaticFiles = new File(root.getAbsolutePath() + "/../dumpsterstuff");
+        folderOutsideStaticFiles.mkdirs();
+
+        String newFilePath = root.getAbsolutePath() + "/../dumpsterstuff/Spark.class";
+        tmpExternalFile2 = new File(newFilePath);
+        tmpExternalFile2.createNewFile();
+
+        externalStaticFileLocation(directoryRoot);
 
         get("/hello", (q, a) -> FO_SHIZZY);
 
@@ -117,14 +132,6 @@ private static void testGet() throws Exception {
         Assert.assertTrue(response.body.contains(FO_SHIZZY));
     }
 
-    //    @Test
-    //    public void testExceptionMapping404() throws Exception {
-    //        SparkTestUtil.UrlResponse response = doGet("/filethatdoesntexist.html");
-    //
-    //        Assert.assertEquals(404, response.status);
-    //        Assert.assertEquals(NOT_FOUND_BRO, response.body);
-    //    }
-
     private SparkTestUtil.UrlResponse doGet(String fileName) throws Exception {
         return testUtil.doMethod("GET", fileName, null);
     }
