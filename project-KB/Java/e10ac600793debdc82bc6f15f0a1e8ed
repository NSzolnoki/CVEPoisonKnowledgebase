diff --git a/src/java/org/orbeon/oxf/servlet/ServletExternalContext.java b/src/java/org/orbeon/oxf/servlet/ServletExternalContext.java
index cf9689d86a..c6c01a9d77 100644
--- a/src/java/org/orbeon/oxf/servlet/ServletExternalContext.java
+++ b/src/java/org/orbeon/oxf/servlet/ServletExternalContext.java
@@ -493,12 +493,20 @@ public void setCaching(long lastModified, boolean revalidate, boolean allowOverr
                 // Make sure the client does not load from cache
                 nativeResponse.setDateHeader("Expires", now);
 
-                // IMPORTANT NOTE #1: We set a public here because with IE 6/7, when BASIC auth is enabled, form
-                // fields are not restored upon browser history navigation. Is there a better way?
-                nativeResponse.setHeader("Cache-Control", "public");
+                // Here we used to set Cache-Control to public, however this caused a rare and hard to reproduce issue
+                // where IE 7 (and maybe other versions of IE, but not Firefox), over-aggressively cached pages
+                // generated by Orbeon Forms. As a result, user A could log a page, logout from the application; later,
+                // user B logs into the application with the same browser, navigates to the page, and gets the version
+                // generated earlier for user A, which was cached by the browser (no request being set by IE to the
+                // server).
+                //
+                // Setting Cache-Control to no-cache solves the problem, but in that case IE doesn't reset the value
+                // of form fields when navigating back to a page, which breaks the mechanism we have to restore the form
+                // upon hitting back in the browser. Setting Cache-Control to private, max-age=0 solves the caching
+                // issue and doesn't prevent IE from restoring form fields upon hitting back. This is also what Google
+                // does on their home page (as of 2010-12-02).
+                nativeResponse.setHeader("Cache-Control", "private, max-age=0");
 
-                // IMPORTANT NOTE #2: We do not set "must-revalidate" because is so with IE 6/7 form fields are not
-                // restored upon browser history navigation.
             } else {
                 // Regular expiration strategy. We use the HTTP spec heuristic to calculate the "Expires" header value
                 // (10% of the difference between the current time and the last modified time)
