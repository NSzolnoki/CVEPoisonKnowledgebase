diff --git a/src/main/java/io/pivotal/security/audit/EventAuditLogService.java b/src/main/java/io/pivotal/security/audit/EventAuditLogService.java
index 133789003..435eac982 100644
--- a/src/main/java/io/pivotal/security/audit/EventAuditLogService.java
+++ b/src/main/java/io/pivotal/security/audit/EventAuditLogService.java
@@ -9,7 +9,6 @@
 import org.springframework.transaction.TransactionStatus;
 import org.springframework.transaction.support.DefaultTransactionDefinition;
 
-import java.util.Collections;
 import java.util.List;
 import java.util.UUID;
 import java.util.function.Function;
@@ -33,23 +32,6 @@ public class EventAuditLogService {
     this.transactionManager = transactionManager;
   }
 
-  public <T> T auditEvent(
-      RequestUuid requestUuid,
-      UserContext userContext,
-      Function<EventAuditRecordParameters, T> respondToRequestFunction
-  ) {
-    TransactionStatus transaction = transactionManager.getTransaction(new DefaultTransactionDefinition());
-    final EventAuditRecordParameters eventAuditRecordParameters = new EventAuditRecordParameters();
-    boolean success = false;
-    try {
-      T response = respondToRequestFunction.apply(eventAuditRecordParameters);
-      success = true;
-      return response;
-    } finally {
-      writeAuditRecords(requestUuid, userContext, Collections.singletonList(eventAuditRecordParameters), success, transaction);
-    }
-  }
-
   public <T> T auditEvents(
       RequestUuid requestUuid,
       UserContext userContext,
diff --git a/src/main/java/io/pivotal/security/audit/EventAuditRecordParameters.java b/src/main/java/io/pivotal/security/audit/EventAuditRecordParameters.java
index b2743a629..f807e100c 100644
--- a/src/main/java/io/pivotal/security/audit/EventAuditRecordParameters.java
+++ b/src/main/java/io/pivotal/security/audit/EventAuditRecordParameters.java
@@ -14,6 +14,10 @@ public EventAuditRecordParameters() {
     this(UNKNOWN_OPERATION, null);
   }
 
+  public EventAuditRecordParameters(AuditingOperationCode auditingOperationCode) {
+    this(auditingOperationCode, null, null, null);
+  }
+
   public EventAuditRecordParameters(AuditingOperationCode auditingOperationCode, String credentialName) {
     this(auditingOperationCode, credentialName, null, null);
   }
diff --git a/src/main/java/io/pivotal/security/controller/v1/PermissionsController.java b/src/main/java/io/pivotal/security/controller/v1/PermissionsController.java
index 1c6df9f00..5f1036c79 100644
--- a/src/main/java/io/pivotal/security/controller/v1/PermissionsController.java
+++ b/src/main/java/io/pivotal/security/controller/v1/PermissionsController.java
@@ -1,6 +1,7 @@
 package io.pivotal.security.controller.v1;
 
 import io.pivotal.security.audit.EventAuditLogService;
+import io.pivotal.security.audit.EventAuditRecordParameters;
 import io.pivotal.security.audit.RequestUuid;
 import io.pivotal.security.auth.UserContext;
 import io.pivotal.security.data.PermissionsDataService;
@@ -54,11 +55,14 @@ public PermissionsView getAccessControlList(
     RequestUuid requestUuid,
     UserContext userContext
   ) throws Exception {
-    return eventAuditLogService.auditEvent(requestUuid, userContext, eventAuditRecordParameters -> {
-      eventAuditRecordParameters.setCredentialName(credentialName);
-      eventAuditRecordParameters.setAuditingOperationCode(ACL_ACCESS);
+    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
+      EventAuditRecordParameters eventAuditRecordParameters = new EventAuditRecordParameters(
+          ACL_ACCESS, credentialName
+      );
+      eventAuditRecordParametersList.add(eventAuditRecordParameters);
 
       final PermissionsView response = permissionsHandler.getPermissions(userContext, credentialName);
+
       eventAuditRecordParameters.setCredentialName(response.getCredentialName());
 
       return response;
diff --git a/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java b/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java
index 3757f7d4b..7409d7494 100644
--- a/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java
+++ b/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java
@@ -4,7 +4,6 @@
 import com.google.common.io.ByteStreams;
 import com.jayway.jsonpath.JsonPath;
 import com.jayway.jsonpath.PathNotFoundException;
-import io.pivotal.security.audit.AuditingOperationCode;
 import io.pivotal.security.audit.EventAuditLogService;
 import io.pivotal.security.audit.EventAuditRecordParameters;
 import io.pivotal.security.audit.RequestUuid;
@@ -12,12 +11,12 @@
 import io.pivotal.security.data.CredentialDataService;
 import io.pivotal.security.exceptions.InvalidQueryParameterException;
 import io.pivotal.security.handler.CredentialHandler;
+import io.pivotal.security.handler.GenerateRequestHandler;
 import io.pivotal.security.handler.SetRequestHandler;
 import io.pivotal.security.request.BaseCredentialGenerateRequest;
 import io.pivotal.security.request.BaseCredentialSetRequest;
 import io.pivotal.security.request.CredentialRegenerateRequest;
 import io.pivotal.security.request.PermissionEntry;
-import io.pivotal.security.handler.GenerateRequestHandler;
 import io.pivotal.security.service.RegenerateService;
 import io.pivotal.security.util.StringUtil;
 import io.pivotal.security.view.CredentialView;
@@ -48,6 +47,7 @@
 import java.util.List;
 import java.util.function.Function;
 
+import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_DELETE;
 import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_FIND;
 
 @RestController
@@ -136,9 +136,8 @@ public void delete(
       throw new InvalidQueryParameterException("error.missing_query_parameter", "name");
     }
 
-    eventAuditLogService.auditEvent(requestUuid, userContext, (eventAuditRecordParameters) -> {
-      eventAuditRecordParameters.setCredentialName(credentialName);
-      eventAuditRecordParameters.setAuditingOperationCode(AuditingOperationCode.CREDENTIAL_DELETE);
+    eventAuditLogService.auditEvents(requestUuid, userContext, (eventAuditRecordParametersList) -> {
+      eventAuditRecordParametersList.add(new EventAuditRecordParameters(CREDENTIAL_DELETE, credentialName));
 
       credentialHandler.deleteCredential(userContext, credentialName);
 
@@ -152,8 +151,8 @@ public CredentialView getCredentialById(
       @PathVariable String id,
       RequestUuid requestUuid,
       UserContext userContext) {
-    return eventAuditLogService.auditEvent(requestUuid, userContext, eventAuditRecordParameters -> (
-        credentialHandler.getCredentialVersion(userContext, eventAuditRecordParameters, id)
+    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> (
+        credentialHandler.getCredentialVersion(userContext, eventAuditRecordParametersList, id)
     ));
   }
 
@@ -168,11 +167,11 @@ public DataResponse getCredential(
       throw new InvalidQueryParameterException("error.missing_query_parameter", "name");
     }
 
-    return eventAuditLogService.auditEvent(requestUuid, userContext, eventAuditRecordParameters -> {
+    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
       if (current) {
-        return credentialHandler.getMostRecentCredentialVersion(userContext, eventAuditRecordParameters, credentialName);
+        return credentialHandler.getMostRecentCredentialVersion(userContext, eventAuditRecordParametersList, credentialName);
       } else {
-        return credentialHandler.getAllCredentialVersions(userContext, eventAuditRecordParameters, credentialName);
+        return credentialHandler.getAllCredentialVersions(userContext, eventAuditRecordParametersList, credentialName);
       }
     });
   }
@@ -190,8 +189,8 @@ public FindCredentialResults findByPath(
   @RequestMapping(path = "", params = "paths=true", method = RequestMethod.GET)
   @ResponseStatus(HttpStatus.OK)
   public FindPathResults findPaths(RequestUuid requestUuid, UserContext userContext) {
-    return eventAuditLogService.auditEvent(requestUuid, userContext, eventAuditRecordParameters -> {
-      eventAuditRecordParameters.setAuditingOperationCode(CREDENTIAL_FIND);
+    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
+      eventAuditRecordParametersList.add(new EventAuditRecordParameters(CREDENTIAL_FIND));
       List<String> paths = credentialDataService.findAllPaths();
       return FindPathResults.fromEntity(paths);
     });
@@ -313,8 +312,8 @@ private FindCredentialResults findWithAuditing(String nameSubstring,
       RequestUuid requestUuid,
       UserContext userContext) {
     return eventAuditLogService
-        .auditEvent(requestUuid, userContext, eventAuditRecordParameters -> {
-          eventAuditRecordParameters.setAuditingOperationCode(CREDENTIAL_FIND);
+        .auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
+          eventAuditRecordParametersList.add(new EventAuditRecordParameters(CREDENTIAL_FIND));
           return new FindCredentialResults(finder.apply(nameSubstring));
         });
   }
diff --git a/src/main/java/io/pivotal/security/handler/CredentialHandler.java b/src/main/java/io/pivotal/security/handler/CredentialHandler.java
index fe2a840b9..2068270dc 100644
--- a/src/main/java/io/pivotal/security/handler/CredentialHandler.java
+++ b/src/main/java/io/pivotal/security/handler/CredentialHandler.java
@@ -44,11 +44,11 @@ public void deleteCredential(UserContext userContext, String credentialName) {
 
   public DataResponse getAllCredentialVersions(
       UserContext userContext,
-      EventAuditRecordParameters auditRecordParameters,
+      List<EventAuditRecordParameters> auditRecordParametersList,
       String credentialName
   ) {
-    auditRecordParameters.setAuditingOperationCode(AuditingOperationCode.CREDENTIAL_ACCESS);
-    auditRecordParameters.setCredentialName(credentialName);
+    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters(AuditingOperationCode.CREDENTIAL_ACCESS, credentialName);
+    auditRecordParametersList.add(auditRecordParameters);
 
     List<Credential> credentials = credentialDataService.findAllByName(credentialName);
 
@@ -62,12 +62,12 @@ public DataResponse getAllCredentialVersions(
 
   public DataResponse getMostRecentCredentialVersion(
       UserContext userContext,
-      EventAuditRecordParameters auditRecordParameters,
+      List<EventAuditRecordParameters> auditRecordParametersList,
       String credentialName
   ) {
     Credential credential = getVersionByIdentifier(
         userContext,
-        auditRecordParameters,
+        auditRecordParametersList,
         credentialName,
         credentialDataService::findMostRecent
     );
@@ -76,12 +76,12 @@ public DataResponse getMostRecentCredentialVersion(
 
   public CredentialView getCredentialVersion(
       UserContext userContext,
-      EventAuditRecordParameters auditRecordParameters,
+      List<EventAuditRecordParameters> auditRecordParametersList,
       String credentialUuid
   ) {
     return CredentialView.fromEntity(getVersionByIdentifier(
         userContext,
-        auditRecordParameters,
+        auditRecordParametersList,
         credentialUuid,
         credentialDataService::findByUuid
     ));
@@ -89,18 +89,22 @@ public CredentialView getCredentialVersion(
 
   private Credential getVersionByIdentifier(
       UserContext userContext,
-      EventAuditRecordParameters auditRecordParameters,
+      List<EventAuditRecordParameters> auditRecordParametersList,
       String identifier,
       Function<String, Credential> getFn
   ) {
-    auditRecordParameters.setAuditingOperationCode(AuditingOperationCode.CREDENTIAL_ACCESS);
+    EventAuditRecordParameters eventAuditRecordParameters = new EventAuditRecordParameters(
+        AuditingOperationCode.CREDENTIAL_ACCESS
+    );
 
     Credential credential = getFn.apply(identifier);
 
     if (credential != null) {
-      auditRecordParameters.setCredentialName(credential.getName());
+      eventAuditRecordParameters.setCredentialName(credential.getName());
     }
 
+    auditRecordParametersList.add(eventAuditRecordParameters);
+
     if (credential == null || !permissionService.hasPermission(userContext.getAclUser(), credential.getName(), READ)) {
       throw new EntryNotFoundException("error.credential_not_found");
     }
diff --git a/src/test/java/io/pivotal/security/audit/EventAuditLogServiceTest.java b/src/test/java/io/pivotal/security/audit/EventAuditLogServiceTest.java
index 2f461563d..be32f4a4c 100644
--- a/src/test/java/io/pivotal/security/audit/EventAuditLogServiceTest.java
+++ b/src/test/java/io/pivotal/security/audit/EventAuditLogServiceTest.java
@@ -93,99 +93,6 @@ public void afterEach() {
     eventAuditRecordRepository.deleteAllInBatch();
   }
 
-  @Test
-  public void auditEvent_whenTheEventAndAuditBothSucceed_auditsTheEvent() {
-    subject.auditEvent(
-        requestUuid,
-        userContext,
-        eventAuditRecordParameters -> {
-          eventAuditRecordParameters.setCredentialName("keyName");
-          eventAuditRecordParameters.setAuditingOperationCode(CREDENTIAL_ACCESS);
-          ValueCredentialData entity = new ValueCredentialData("keyName");
-          entity.setEncryptedValue("value".getBytes());
-          return credentialDataService.save(entity);
-        }
-    );
-
-    assertThat(credentialDataService.count(), equalTo(1L));
-    checkAuditRecord(true);
-  }
-
-  @Test(expected = AuditSaveFailureException.class)
-  public void auditEvent_whenTheEventAndAuditBothFail_rollsBackAndThrowsAnException() {
-    doThrow(new RuntimeException()).when(eventAuditRecordDataService)
-        .save(any(List.class));
-
-    userContext = mockUserContext(false);
-
-    try {
-      subject.auditEvent(requestUuid, userContext, eventAuditRecordParameters -> {
-        eventAuditRecordParameters.setCredentialName("keyName");
-
-        ValueCredentialData entity = new ValueCredentialData("keyName");
-        entity.setEncryptedValue("value".getBytes());
-        credentialDataService.save(entity);
-
-        throw new RuntimeException("controller method failed");
-      });
-    } finally {
-      final ArgumentCaptor<TransactionStatus> captor = ArgumentCaptor.forClass(TransactionStatus.class);
-      verify(transactionManager, times(2)).rollback(captor.capture());
-
-      List<TransactionStatus> transactionStatuses = captor.getAllValues();
-      assertThat(transactionStatuses.get(0).isCompleted(), equalTo(true));
-      assertThat(transactionStatuses.get(1).isCompleted(), equalTo(true));
-
-      assertThat(credentialDataService.count(), equalTo(0L));
-      assertThat(eventAuditRecordRepository.count(), equalTo(0L));
-    }
-  }
-
-  @Test(expected = AuditSaveFailureException.class)
-  public void auditEvent_whenTheEventSucceeds_andTheAuditFails_rollsBackTheEventAndThrowsAnException() {
-    doThrow(new RuntimeException()).when(eventAuditRecordDataService)
-        .save(any(List.class));
-
-    userContext = mockUserContext(false);
-
-    try {
-      subject.auditEvent(requestUuid, userContext, eventAuditRecordParameters -> {
-        eventAuditRecordParameters.setCredentialName("keyName");
-
-        ValueCredentialData entity = new ValueCredentialData("keyName");
-        entity.setEncryptedValue("value".getBytes());
-        return credentialDataService.save(entity);
-      });
-    } finally {
-      final ArgumentCaptor<TransactionStatus> captor = ArgumentCaptor.forClass(TransactionStatus.class);
-      verify(transactionManager, times(1)).rollback(captor.capture());
-
-      List<TransactionStatus> transactionStatuses = captor.getAllValues();
-      assertThat(transactionStatuses.get(0).isCompleted(), equalTo(true));
-
-      assertThat(credentialDataService.count(), equalTo(0L));
-      assertThat(eventAuditRecordRepository.count(), equalTo(0L));
-    }
-  }
-
-  @Test(expected = RuntimeException.class)
-  public void auditEvent_whenTheEventFails_shouldAuditTheFailure() {
-    try {
-      subject.auditEvent(requestUuid, userContext, eventAuditRecordParameters -> {
-        eventAuditRecordParameters.setCredentialName("keyName");
-        eventAuditRecordParameters.setAuditingOperationCode(CREDENTIAL_ACCESS);
-
-        ValueCredentialData entity = new ValueCredentialData("keyName");
-        entity.setEncryptedValue("value".getBytes());
-        credentialDataService.save(entity);
-
-        throw new RuntimeException("controller method failed");
-      });
-    } finally {
-      checkAuditRecord(false);
-    }
-  }
-
   @Test
   public void auditEvents_whenTheEventAndAuditsBothSucceed_auditsTheEvent() {
     EventAuditRecordParameters parameters1 = new EventAuditRecordParameters(
diff --git a/src/test/java/io/pivotal/security/controller/v1/PermissionsControllerTest.java b/src/test/java/io/pivotal/security/controller/v1/PermissionsControllerTest.java
index 5516253b4..4380ea47b 100644
--- a/src/test/java/io/pivotal/security/controller/v1/PermissionsControllerTest.java
+++ b/src/test/java/io/pivotal/security/controller/v1/PermissionsControllerTest.java
@@ -4,7 +4,6 @@
 import com.greghaskins.spectrum.Spectrum;
 import io.pivotal.security.audit.EventAuditLogService;
 import io.pivotal.security.audit.EventAuditRecordParameters;
-import io.pivotal.security.audit.RequestUuid;
 import io.pivotal.security.auth.UserContext;
 import io.pivotal.security.data.PermissionsDataService;
 import io.pivotal.security.handler.PermissionsHandler;
@@ -21,6 +20,7 @@
 import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Function;
 
@@ -63,13 +63,15 @@ public class PermissionsControllerTest {
       eventAuditLogService = mock(EventAuditLogService.class);
       permissionsDataService = mock(PermissionsDataService.class);
 
-      when(eventAuditLogService.auditEvents(any(RequestUuid.class), any(UserContext.class), any(Function.class)))
-          .thenAnswer(invocation -> invocation.getArgumentAt(2, Function.class).apply(newArrayList()));
-
-
       subject = new PermissionsController(permissionsHandler, eventAuditLogService,
           permissionsDataService);
 
+      when(eventAuditLogService.auditEvents(any(), any(), any())).thenAnswer(answer -> {
+        Function<List<EventAuditRecordParameters>, RequestEntity> block = answer
+            .getArgumentAt(2, Function.class);
+        return block.apply(mock(ArrayList.class));
+      });
+
       MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter =
           new MappingJackson2HttpMessageConverter();
       ObjectMapper objectMapper = JsonTestHelper.createObjectMapper();
@@ -89,12 +91,6 @@ public class PermissionsControllerTest {
               permissionsHandler.getPermissions(any(UserContext.class), eq("test_credential_name")))
               .thenReturn(permissionsView);
 
-          when(eventAuditLogService.auditEvent(any(), any(), any())).thenAnswer(answer -> {
-            Function<EventAuditRecordParameters, RequestEntity> block = answer
-                .getArgumentAt(2, Function.class);
-            return block.apply(mock(EventAuditRecordParameters.class));
-          });
-
           mockMvc.perform(get("/api/v1/permissions?credential_name=test_credential_name"))
               .andExpect(status().isOk())
               .andExpect(jsonPath("$.credential_name").value("test_credential_name"))
diff --git a/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java b/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
index 96f5cb812..a0b833d98 100644
--- a/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
+++ b/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
@@ -115,7 +115,7 @@ public void getAllCredentialVersions_whenTheCredentialExists_returnsADataRespons
         .thenReturn(true);
 
     DataResponse response = subject.getAllCredentialVersions(userContext,
-        new EventAuditRecordParameters(), CREDENTIAL_NAME);
+        newArrayList(), CREDENTIAL_NAME);
 
     List<CredentialView> responseCredentials = response.getData();
     assertThat(responseCredentials, hasSize(2));
@@ -127,16 +127,18 @@ public void getAllCredentialVersions_whenTheCredentialExists_returnsADataRespons
 
   @Test
   public void getAllCredentialVersions_whenTheCredentialExists_setsCorrectAuditingParameters() {
-    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters();
+    List<EventAuditRecordParameters> auditRecordParametersList = newArrayList();
     List<Credential> credentials = newArrayList(version1);
     when(credentialDataService.findAllByName(CREDENTIAL_NAME))
         .thenReturn(credentials);
     when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
         .thenReturn(true);
 
-    subject.getAllCredentialVersions(userContext, auditRecordParameters, CREDENTIAL_NAME);
-    assertThat(auditRecordParameters.getCredentialName(), equalTo(CREDENTIAL_NAME));
-    assertThat(auditRecordParameters.getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
+    subject.getAllCredentialVersions(userContext, auditRecordParametersList, CREDENTIAL_NAME);
+
+    assertThat(auditRecordParametersList, hasSize(1));
+    assertThat(auditRecordParametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
+    assertThat(auditRecordParametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
   }
 
   @Test
@@ -148,7 +150,7 @@ public void getAllCredentialVersions_whenTheUserLacksPermission_throwsException(
         .thenReturn(false);
 
     try {
-      subject.getAllCredentialVersions(userContext, new EventAuditRecordParameters(),
+      subject.getAllCredentialVersions(userContext, newArrayList(),
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
@@ -159,17 +161,18 @@ public void getAllCredentialVersions_whenTheUserLacksPermission_throwsException(
   @Test
   public void getAllCredentialVersions_whenTheUserLacksPermission_setsCorrectAuditingParameters() {
     List<Credential> credentials = newArrayList(version1);
-    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters();
+    List<EventAuditRecordParameters> auditRecordParametersList = newArrayList();
     when(credentialDataService.findAllByName(CREDENTIAL_NAME))
         .thenReturn(credentials);
     when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
         .thenReturn(false);
 
     try {
-      subject.getAllCredentialVersions(userContext, auditRecordParameters, CREDENTIAL_NAME);
+      subject.getAllCredentialVersions(userContext, auditRecordParametersList, CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(auditRecordParameters.getCredentialName(), equalTo(CREDENTIAL_NAME));
+      assertThat(auditRecordParametersList, hasSize(1));
+      assertThat(auditRecordParametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
     }
   }
 
@@ -181,7 +184,7 @@ public void getCredentialVersions_whenTheCredentialDoesNotExist_throwsException(
         .thenReturn(true);
 
     try {
-      subject.getAllCredentialVersions(userContext, new EventAuditRecordParameters(),
+      subject.getAllCredentialVersions(userContext, newArrayList(),
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
@@ -191,17 +194,18 @@ public void getCredentialVersions_whenTheCredentialDoesNotExist_throwsException(
 
   @Test
   public void getCredentialVersions_whenTheCredentialDoesNotExist_setsCorrectAuditingParameter() {
-    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters();
+    List<EventAuditRecordParameters> auditRecordParametersList = newArrayList();
 
     when(credentialDataService.findAllByName(CREDENTIAL_NAME))
         .thenReturn(emptyList());
 
     try {
-      subject.getAllCredentialVersions(userContext, auditRecordParameters, CREDENTIAL_NAME
+      subject.getAllCredentialVersions(userContext, auditRecordParametersList, CREDENTIAL_NAME
       );
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(auditRecordParameters.getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
+      assertThat(auditRecordParametersList, hasSize(1));
+      assertThat(auditRecordParametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
     }
   }
 
@@ -214,7 +218,7 @@ public void getMostRecentCredentialVersion_whenTheCredentialExists_returnsDataRe
 
     DataResponse response = subject.getMostRecentCredentialVersion(
         userContext,
-        new EventAuditRecordParameters(), CREDENTIAL_NAME
+        newArrayList(), CREDENTIAL_NAME
     );
     List<CredentialView> responseCredentials = response.getData();
 
@@ -225,16 +229,17 @@ public void getMostRecentCredentialVersion_whenTheCredentialExists_returnsDataRe
 
   @Test
   public void getMostRecentCredentialVersion_whenTheCredentialExists_setsCorrectAuditingParameters() {
-    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters();
+    List<EventAuditRecordParameters> auditRecordParametersList = newArrayList();
     when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
         .thenReturn(version1);
     when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
         .thenReturn(true);
 
-    subject.getMostRecentCredentialVersion(userContext, auditRecordParameters, CREDENTIAL_NAME);
+    subject.getMostRecentCredentialVersion(userContext, auditRecordParametersList, CREDENTIAL_NAME);
 
-    assertThat(auditRecordParameters.getCredentialName(), equalTo(CREDENTIAL_NAME));
-    assertThat(auditRecordParameters.getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
+    assertThat(auditRecordParametersList, hasSize(1));
+    assertThat(auditRecordParametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
+    assertThat(auditRecordParametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
   }
 
   @Test
@@ -243,7 +248,7 @@ public void getMostRecentCredentialVersion_whenTheCredentialDoesNotExist_throwsE
         .thenReturn(null);
 
     try {
-      subject.getMostRecentCredentialVersion(userContext, new EventAuditRecordParameters(),
+      subject.getMostRecentCredentialVersion(userContext, newArrayList(),
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
@@ -259,7 +264,7 @@ public void getMostRecentCredentialVersion_whenTheUserLacksPermission_throwsExce
         .thenReturn(false);
 
     try {
-      subject.getMostRecentCredentialVersion(userContext, new EventAuditRecordParameters(),
+      subject.getMostRecentCredentialVersion(userContext, newArrayList(),
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
@@ -269,7 +274,7 @@ public void getMostRecentCredentialVersion_whenTheUserLacksPermission_throwsExce
 
   @Test
   public void getMostRecentCredentialVersion_whenTheUserLacksPermission_setsCorrectAuditingParameters() {
-    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters();
+    List<EventAuditRecordParameters> auditRecordParametersList = newArrayList();
 
     when(credentialDataService.findMostRecent(CREDENTIAL_NAME))
         .thenReturn(version1);
@@ -277,11 +282,11 @@ public void getMostRecentCredentialVersion_whenTheUserLacksPermission_setsCorrec
         .thenReturn(false);
 
     try {
-      subject.getMostRecentCredentialVersion(userContext, auditRecordParameters, CREDENTIAL_NAME);
+      subject.getMostRecentCredentialVersion(userContext, auditRecordParametersList, CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(auditRecordParameters.getCredentialName(), equalTo(CREDENTIAL_NAME));
-      assertThat(auditRecordParameters.getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
+      assertThat(auditRecordParametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
+      assertThat(auditRecordParametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
     }
   }
 
@@ -294,7 +299,8 @@ public void getCredentialVersion_whenTheVersionExists_returnsDataResponse() {
 
     CredentialView response = subject.getCredentialVersion(
         userContext,
-        new EventAuditRecordParameters(), UUID_STRING
+        newArrayList(),
+        UUID_STRING
     );
     assertThat(response.getName(), equalTo(CREDENTIAL_NAME));
     assertThat(response.getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
@@ -302,16 +308,19 @@ public void getCredentialVersion_whenTheVersionExists_returnsDataResponse() {
 
   @Test
   public void getCredentialVersion_whenTheVersionExists_setsCorrectAuditingParameters() {
-    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters();
+    List<EventAuditRecordParameters> auditRecordParametersList = newArrayList();
+
     when(credentialDataService.findByUuid(UUID_STRING))
         .thenReturn(version1);
     when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
         .thenReturn(true);
 
-    subject.getCredentialVersion(userContext, auditRecordParameters, UUID_STRING);
+    subject.getCredentialVersion(userContext, auditRecordParametersList, UUID_STRING);
+
+    assertThat(auditRecordParametersList, hasSize(1));
 
-    assertThat(auditRecordParameters.getCredentialName(), equalTo(CREDENTIAL_NAME));
-    assertThat(auditRecordParameters.getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
+    assertThat(auditRecordParametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
+    assertThat(auditRecordParametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
   }
 
   @Test
@@ -320,7 +329,7 @@ public void getCredentialVersion_whenTheVersionDoesNotExist_throwsException() {
         .thenReturn(null);
 
     try {
-      subject.getCredentialVersion(userContext, new EventAuditRecordParameters(), UUID_STRING);
+      subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
       assertThat(e.getMessage(), equalTo("error.credential_not_found"));
@@ -335,7 +344,7 @@ public void getCredentialVersion_whenTheUserLacksPermission_throwsException() {
         .thenReturn(false);
 
     try {
-      subject.getCredentialVersion(userContext, new EventAuditRecordParameters(), UUID_STRING);
+      subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
       assertThat(e.getMessage(), equalTo("error.credential_not_found"));
@@ -344,7 +353,7 @@ public void getCredentialVersion_whenTheUserLacksPermission_throwsException() {
 
   @Test
   public void getCredentialVersion_whenTheUserLacksPermission_setsCorrectAuditingParameters() {
-    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters();
+    List<EventAuditRecordParameters> auditRecordParametersList = newArrayList();
 
     when(credentialDataService.findByUuid(UUID_STRING))
         .thenReturn(version1);
@@ -352,11 +361,12 @@ public void getCredentialVersion_whenTheUserLacksPermission_setsCorrectAuditingP
         .thenReturn(false);
 
     try {
-      subject.getCredentialVersion(userContext, auditRecordParameters, UUID_STRING);
+      subject.getCredentialVersion(userContext, auditRecordParametersList, UUID_STRING);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(auditRecordParameters.getCredentialName(), equalTo(CREDENTIAL_NAME));
-      assertThat(auditRecordParameters.getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
+      assertThat(auditRecordParametersList, hasSize(1));
+      assertThat(auditRecordParametersList.get(0).getCredentialName(), equalTo(CREDENTIAL_NAME));
+      assertThat(auditRecordParametersList.get(0).getAuditingOperationCode(), equalTo(CREDENTIAL_ACCESS));
     }
   }
 }
