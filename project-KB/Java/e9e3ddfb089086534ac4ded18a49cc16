diff --git a/jbpm-designer-backend/src/main/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshaller.java b/jbpm-designer-backend/src/main/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshaller.java
index 81b2e3038a..5f24ec2e79 100644
--- a/jbpm-designer-backend/src/main/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshaller.java
+++ b/jbpm-designer-backend/src/main/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshaller.java
@@ -1096,77 +1096,7 @@ protected void marshallCallActivity(CallActivity callActivity, BPMNPlane plane,
         properties.put("assignments", assignmentString);
 
         // on-entry and on-exit actions
-        if(callActivity.getExtensionValues() != null && callActivity.getExtensionValues().size() > 0) {
-
-            String onEntryStr = "";
-            String onExitStr = "";
-            for(ExtensionAttributeValue extattrval : callActivity.getExtensionValues()) {
-
-                FeatureMap extensionElements = extattrval.getValue();
-
-                @SuppressWarnings("unchecked")
-                List<OnEntryScriptType> onEntryExtensions = (List<OnEntryScriptType>) extensionElements
-                                                     .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_ENTRY_SCRIPT, true);
-
-                @SuppressWarnings("unchecked")
-                List<OnExitScriptType> onExitExtensions = (List<OnExitScriptType>) extensionElements
-                                                  .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_EXIT_SCRIPT, true);
-
-                for(OnEntryScriptType onEntryScript : onEntryExtensions) {
-                    onEntryStr += onEntryScript.getScript();
-                    onEntryStr += "\n";
-
-                    if(onEntryScript.getScriptFormat() != null) {
-                        String format = onEntryScript.getScriptFormat();
-                        String formatToWrite = "";
-                        if(format.equals("http://www.java.com/java")) {
-                            formatToWrite = "java";
-                        } else if(format.equals("http://www.mvel.org/2.0")) {
-                            formatToWrite = "mvel";
-                        } else if(format.equals("http://www.javascript.com/javascript")) {
-                            formatToWrite = "javascript";
-                        } else {
-                            formatToWrite = "java";
-                        }
-                        properties.put("script_language", formatToWrite);
-                    }
-                }
-
-                for(OnExitScriptType onExitScript : onExitExtensions) {
-                    onExitStr += onExitScript.getScript();
-                    onExitStr += "\n";
-
-                    if(onExitScript.getScriptFormat() != null) {
-                        String format = onExitScript.getScriptFormat();
-                        String formatToWrite = "";
-                        if(format.equals("http://www.java.com/java")) {
-                            formatToWrite = "java";
-                        } else if(format.equals("http://www.mvel.org/2.0")) {
-                            formatToWrite = "mvel";
-                        } else if(format.equals("http://www.javascript.com/javascript")) {
-                            formatToWrite = "javascript";
-                        } else {
-                            formatToWrite = "java";
-                        }
-                        if(properties.get("script_language") == null) {
-                            properties.put("script_language", formatToWrite);
-                        }
-                    }
-                }
-            }
-            if(onEntryStr.length() > 0) {
-                if(onEntryStr.endsWith("|")) {
-                    onEntryStr = onEntryStr.substring(0, onEntryStr.length() - 1);
-                }
-                properties.put("onentryactions", onEntryStr);
-            }
-            if(onExitStr.length() > 0) {
-                if(onExitStr.endsWith("|")) {
-                    onExitStr = onExitStr.substring(0, onExitStr.length() - 1);
-                }
-                properties.put("onexitactions", onExitStr);
-            }
-        }
+        marshallEntryExitActions(callActivity, properties);
 
         // simulation properties
         setSimulationProperties(callActivity.getId(), properties);
@@ -1191,17 +1121,7 @@ protected void marshallTask(Task task, BPMNPlane plane, JsonGenerator generator,
     		properties.put("script", scriptTask.getScript() != null ? scriptTask.getScript().replace("\\", "\\\\").replace("\n", "\\n") : "");
     		String format = scriptTask.getScriptFormat();
     		if(format != null && format.length() > 0) {
-    			String formatToWrite = "";
-                if(format.equals("http://www.java.com/java")) {
-                    formatToWrite = "java";
-                } else if(format.equals("http://www.mvel.org/2.0")) {
-                    formatToWrite = "mvel";
-                } else if(format.equals("http://www.javascript.com/javascript")) {
-                    formatToWrite = "javascript";
-                } else {
-                	// default to java
-                    formatToWrite = "java";
-                }
+    			String formatToWrite = getScriptLanguageFormat(format);
                 properties.put("script_language", formatToWrite);
     		}
     		taskType = "Script";
@@ -1674,58 +1594,58 @@ else if (dataInName.equals("NotStartedNotify")) {
         properties.put("assignments", assignmentString);
 
         // on-entry and on-exit actions
-        if(task.getExtensionValues() != null && task.getExtensionValues().size() > 0) {
+        marshallEntryExitActions(task, properties);
+
+        // simulation properties
+        setSimulationProperties(task.getId(), properties);
+
+        // marshall the node out
+        if(isCustomElement((String) properties.get("taskname"), preProcessingData)) {
+            marshallNode(task, properties, (String) properties.get("taskname"), plane, generator, xOffset, yOffset);
+        } else {
+            marshallNode(task, properties, "Task", plane, generator, xOffset, yOffset);
+        }
+    }
+
+    private void marshallEntryExitActions(BaseElement element, Map<String, Object> properties) {
+        if(element.getExtensionValues() != null && element.getExtensionValues().size() > 0) {
 
             String onEntryStr = "";
             String onExitStr = "";
-            for(ExtensionAttributeValue extattrval : task.getExtensionValues()) {
+            for(ExtensionAttributeValue extattrval : element.getExtensionValues()) {
 
                 FeatureMap extensionElements = extattrval.getValue();
 
                 @SuppressWarnings("unchecked")
                 List<OnEntryScriptType> onEntryExtensions = (List<OnEntryScriptType>) extensionElements
-                                                     .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_ENTRY_SCRIPT, true);
+                        .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_ENTRY_SCRIPT, true);
 
                 @SuppressWarnings("unchecked")
                 List<OnExitScriptType> onExitExtensions = (List<OnExitScriptType>) extensionElements
-                                                  .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_EXIT_SCRIPT, true);
+                        .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_EXIT_SCRIPT, true);
 
                 for(OnEntryScriptType onEntryScript : onEntryExtensions) {
-                    onEntryStr += onEntryScript.getScript();
-                    onEntryStr += "\n";
+                    onEntryStr += onEntryScript.getScript().replace("\\", "\\\\").replace("\n", "\\n");
+                    if(!onEntryStr.endsWith("\\n")) {
+                        onEntryStr += "\n";
+                    }
 
                     if(onEntryScript.getScriptFormat() != null) {
                         String format = onEntryScript.getScriptFormat();
-                        String formatToWrite = "";
-                        if(format.equals("http://www.java.com/java")) {
-                            formatToWrite = "java";
-                        } else if(format.equals("http://www.mvel.org/2.0")) {
-                            formatToWrite = "mvel";
-                        } else if(format.equals("http://www.javascript.com/javascript")) {
-                            formatToWrite = "javascript";
-                        } else {
-                            formatToWrite = "java";
-                        }
+                        String formatToWrite = getScriptLanguageFormat(format);
                         properties.put("script_language", formatToWrite);
                     }
                 }
 
                 for(OnExitScriptType onExitScript : onExitExtensions) {
-                    onExitStr += onExitScript.getScript();
-                    onExitStr += "\n";
+                    onExitStr += onExitScript.getScript().replace("\\", "\\\\").replace("\n", "\\n");
+                    if(!onExitStr.endsWith("\\n")) {
+                        onExitStr += "\n";
+                    }
 
                     if(onExitScript.getScriptFormat() != null) {
                         String format = onExitScript.getScriptFormat();
-                        String formatToWrite = "";
-                        if(format.equals("http://www.java.com/java")) {
-                            formatToWrite = "java";
-                        } else if(format.equals("http://www.mvel.org/2.0")) {
-                            formatToWrite = "mvel";
-                        } else if(format.equals("http://www.javascript.com/javascript")) {
-                            formatToWrite = "javascript";
-                        } else {
-                            formatToWrite = "java";
-                        }
+                        String formatToWrite = getScriptLanguageFormat(format);
                         if(properties.get("script_language") == null) {
                             properties.put("script_language", formatToWrite);
                         }
@@ -1745,15 +1665,19 @@ else if (dataInName.equals("NotStartedNotify")) {
                 properties.put("onexitactions", onExitStr);
             }
         }
+    }
 
-        // simulation properties
-        setSimulationProperties(task.getId(), properties);
-
-        // marshall the node out
-        if(isCustomElement((String) properties.get("taskname"), preProcessingData)) {
-            marshallNode(task, properties, (String) properties.get("taskname"), plane, generator, xOffset, yOffset);
+    private String getScriptLanguageFormat(String fullQualifiedFormat) {
+        if(fullQualifiedFormat == null) {
+            return "";
+        } else if(fullQualifiedFormat.equals("http://www.java.com/java")) {
+            return  "java";
+        } else if(fullQualifiedFormat.equals("http://www.mvel.org/2.0")) {
+            return "mvel";
+        } else if(fullQualifiedFormat.equals("http://www.javascript.com/javascript")) {
+            return "javascript";
         } else {
-            marshallNode(task, properties, "Task", plane, generator, xOffset, yOffset);
+            return "java";
         }
     }
 
@@ -2151,77 +2075,7 @@ protected void marshallSubProcess(SubProcess subProcess, BPMNPlane plane, JsonGe
         properties.put("assignments", assignmentString);
 
         // on-entry and on-exit actions
-        if(subProcess.getExtensionValues() != null && subProcess.getExtensionValues().size() > 0) {
-
-            String onEntryStr = "";
-            String onExitStr = "";
-            for(ExtensionAttributeValue extattrval : subProcess.getExtensionValues()) {
-
-                FeatureMap extensionElements = extattrval.getValue();
-
-                @SuppressWarnings("unchecked")
-                List<OnEntryScriptType> onEntryExtensions = (List<OnEntryScriptType>) extensionElements
-                                                     .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_ENTRY_SCRIPT, true);
-
-                @SuppressWarnings("unchecked")
-                List<OnExitScriptType> onExitExtensions = (List<OnExitScriptType>) extensionElements
-                                                  .get(DroolsPackage.Literals.DOCUMENT_ROOT__ON_EXIT_SCRIPT, true);
-
-                for(OnEntryScriptType onEntryScript : onEntryExtensions) {
-                    onEntryStr += onEntryScript.getScript();
-                    onEntryStr += "\n";
-
-                    if(onEntryScript.getScriptFormat() != null) {
-                        String format = onEntryScript.getScriptFormat();
-                        String formatToWrite = "";
-                        if(format.equals("http://www.java.com/java")) {
-                            formatToWrite = "java";
-                        } else if(format.equals("http://www.mvel.org/2.0")) {
-                            formatToWrite = "mvel";
-                        } else if(format.equals("http://www.javascript.com/javascript")) {
-                            formatToWrite = "javascript";
-                        } else {
-                            formatToWrite = "java";
-                        }
-                        properties.put("script_language", formatToWrite);
-                    }
-                }
-
-                for(OnExitScriptType onExitScript : onExitExtensions) {
-                    onExitStr += onExitScript.getScript();
-                    onExitStr += "\n";
-
-                    if(onExitScript.getScriptFormat() != null) {
-                        String format = onExitScript.getScriptFormat();
-                        String formatToWrite = "";
-                        if(format.equals("http://www.java.com/java")) {
-                            formatToWrite = "java";
-                        } else if(format.equals("http://www.mvel.org/2.0")) {
-                            formatToWrite = "mvel";
-                        } else if(format.equals("http://www.javascript.com/javascript")) {
-                            formatToWrite = "javascript";
-                        } else {
-                            formatToWrite = "java";
-                        }
-                        if(properties.get("script_language") == null) {
-                            properties.put("script_language", formatToWrite);
-                        }
-                    }
-                }
-            }
-            if(onEntryStr.length() > 0) {
-                if(onEntryStr.endsWith("|")) {
-                    onEntryStr = onEntryStr.substring(0, onEntryStr.length() - 1);
-                }
-                properties.put("onentryactions", onEntryStr);
-            }
-            if(onExitStr.length() > 0) {
-                if(onExitStr.endsWith("|")) {
-                    onExitStr = onExitStr.substring(0, onExitStr.length() - 1);
-                }
-                properties.put("onexitactions", onExitStr);
-            }
-        }
+        marshallEntryExitActions(subProcess, properties);
 
         // loop characteristics
         boolean haveValidLoopCharacteristics = false;
diff --git a/jbpm-designer-backend/src/test/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshallerTest.java b/jbpm-designer-backend/src/test/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshallerTest.java
index 5164bf807c..5ad11e098b 100644
--- a/jbpm-designer-backend/src/test/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshallerTest.java
+++ b/jbpm-designer-backend/src/test/java/org/jbpm/designer/bpmn2/impl/Bpmn2JsonMarshallerTest.java
@@ -520,4 +520,15 @@ public void testOnEntryOnExitActions() throws Exception {
 
     }
 
+    @Test
+    public void testOnEntryOnExitActionsEscaping() throws Exception {
+        JSONObject process = loader.loadProcessFromXml("onEntryonExitActionsEscaping.bpmn2");
+        JSONObject task = getChildByName(process, "task");
+        JSONObject properties = task.getJSONObject("properties");
+
+        assertEquals("myVariable = \"\\\\\"text in quotes\\\\\"\";\\nSystem.out.println(myVariable);\\n", properties.getString("onentryactions"));
+        assertEquals("myVariable = \"\\\\\"another text in quotes\\\\\"\";\\nSystem.out.println(myVariable);\\n", properties.getString("onexitactions"));
+
+    }
+
 }
diff --git a/jbpm-designer-backend/src/test/resources/org/jbpm/designer/bpmn2/impl/onEntryonExitActionsEscaping.bpmn2 b/jbpm-designer-backend/src/test/resources/org/jbpm/designer/bpmn2/impl/onEntryonExitActionsEscaping.bpmn2
new file mode 100644
index 0000000000..92d711e06b
--- /dev/null
+++ b/jbpm-designer-backend/src/test/resources/org/jbpm/designer/bpmn2/impl/onEntryonExitActionsEscaping.bpmn2
@@ -0,0 +1,119 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.omg.org/bpmn20" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:bpsim="http://www.bpsim.org/schemas/1.0" xmlns:color="http://www.omg.org/spec/BPMN/non-normative/color" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:drools="http://www.jboss.org/drools" id="_pLzOYLrbEealcIOwN0JulA" xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd" exporter="jBPM Designer" exporterVersion="6.2.0" expressionLanguage="http://www.mvel.org/2.0" targetNamespace="http://www.omg.org/bpmn20" typeLanguage="http://www.java.com/javaTypes">
+    <bpmn2:process id="mortgages.onEntryonExitActionsEscaping" drools:packageName="org.jbpm" drools:version="1.0" name="onEntryonExitActionsEscaping" isExecutable="true">
+        <bpmn2:startEvent id="processStartEvent" drools:selectable="true" color:background-color="#9acd32" color:border-color="#000000" color:color="#000000" name="">
+            <bpmn2:extensionElements>
+                <drools:metaData name="elementname">
+                    <drools:metaValue><![CDATA[]]></drools:metaValue>
+                </drools:metaData>
+            </bpmn2:extensionElements>
+            <bpmn2:outgoing>_D60E6277-3E62-4C54-838B-F5E79E70171E</bpmn2:outgoing>
+        </bpmn2:startEvent>
+        <bpmn2:scriptTask id="_0B159F0B-85BB-48F4-BEDD-4CCCDBFE1618" drools:selectable="true" color:background-color="#fafad2" color:border-color="#000000" color:color="#000000" name="task" scriptFormat="http://www.java.com/java">
+            <bpmn2:extensionElements>
+                <drools:metaData name="elementname">
+                    <drools:metaValue><![CDATA[task]]></drools:metaValue>
+                </drools:metaData>
+                <drools:onEntry-script scriptFormat="http://www.java.com/java">
+                    <drools:script><![CDATA[myVariable = "\"text in quotes\"";
+System.out.println(myVariable);
+]]></drools:script>
+                </drools:onEntry-script>
+                <drools:onExit-script scriptFormat="http://www.java.com/java">
+                    <drools:script><![CDATA[myVariable = "\"another text in quotes\"";
+System.out.println(myVariable);
+]]></drools:script>
+                </drools:onExit-script>
+            </bpmn2:extensionElements>
+            <bpmn2:incoming>_D60E6277-3E62-4C54-838B-F5E79E70171E</bpmn2:incoming>
+            <bpmn2:outgoing>_DA2082ED-3169-46E9-A887-7E0995C87CEB</bpmn2:outgoing>
+        </bpmn2:scriptTask>
+        <bpmn2:sequenceFlow id="_D60E6277-3E62-4C54-838B-F5E79E70171E" drools:selectable="true" color:background-color="#000000" color:border-color="#000000" color:color="#000000" sourceRef="processStartEvent" targetRef="_0B159F0B-85BB-48F4-BEDD-4CCCDBFE1618"/>
+        <bpmn2:endEvent id="_F6B61269-D793-485A-B5E3-7B84373150F2" drools:selectable="true" color:background-color="#ff6347" color:border-color="#000000" color:color="#000000" name="">
+            <bpmn2:extensionElements>
+                <drools:metaData name="elementname">
+                    <drools:metaValue><![CDATA[]]></drools:metaValue>
+                </drools:metaData>
+            </bpmn2:extensionElements>
+            <bpmn2:incoming>_DA2082ED-3169-46E9-A887-7E0995C87CEB</bpmn2:incoming>
+        </bpmn2:endEvent>
+        <bpmn2:sequenceFlow id="_DA2082ED-3169-46E9-A887-7E0995C87CEB" drools:selectable="true" color:background-color="#000000" color:border-color="#000000" color:color="#000000" sourceRef="_0B159F0B-85BB-48F4-BEDD-4CCCDBFE1618" targetRef="_F6B61269-D793-485A-B5E3-7B84373150F2"/>
+    </bpmn2:process>
+    <bpmndi:BPMNDiagram id="_pLzOYbrbEealcIOwN0JulA">
+        <bpmndi:BPMNPlane id="_pLzOYrrbEealcIOwN0JulA" bpmnElement="mortgages.onEntryonExitActionsEscaping">
+            <bpmndi:BPMNShape id="_pLzOY7rbEealcIOwN0JulA" bpmnElement="processStartEvent">
+                <dc:Bounds height="30.0" width="30.0" x="120.0" y="165.0"/>
+            </bpmndi:BPMNShape>
+            <bpmndi:BPMNShape id="_pLzOZLrbEealcIOwN0JulA" bpmnElement="_0B159F0B-85BB-48F4-BEDD-4CCCDBFE1618">
+                <dc:Bounds height="80.0" width="100.0" x="195.0" y="140.0"/>
+            </bpmndi:BPMNShape>
+            <bpmndi:BPMNShape id="_pLzOZbrbEealcIOwN0JulA" bpmnElement="_F6B61269-D793-485A-B5E3-7B84373150F2">
+                <dc:Bounds height="28.0" width="28.0" x="345.0" y="166.0"/>
+            </bpmndi:BPMNShape>
+            <bpmndi:BPMNEdge id="_pLzOZrrbEealcIOwN0JulA" bpmnElement="_D60E6277-3E62-4C54-838B-F5E79E70171E" sourceElement="_pLzOY7rbEealcIOwN0JulA" targetElement="_pLzOZLrbEealcIOwN0JulA">
+                <di:waypoint xsi:type="dc:Point" x="135.0" y="180.0"/>
+                <di:waypoint xsi:type="dc:Point" x="245.0" y="180.0"/>
+            </bpmndi:BPMNEdge>
+            <bpmndi:BPMNEdge id="_pLzOZ7rbEealcIOwN0JulA" bpmnElement="_DA2082ED-3169-46E9-A887-7E0995C87CEB" sourceElement="_pLzOZLrbEealcIOwN0JulA" targetElement="_pLzOZbrbEealcIOwN0JulA">
+                <di:waypoint xsi:type="dc:Point" x="245.0" y="180.0"/>
+                <di:waypoint xsi:type="dc:Point" x="359.0" y="180.0"/>
+            </bpmndi:BPMNEdge>
+        </bpmndi:BPMNPlane>
+    </bpmndi:BPMNDiagram>
+    <bpmn2:relationship id="_pLzOaLrbEealcIOwN0JulA" type="BPSimData">
+        <bpmn2:extensionElements>
+            <bpsim:BPSimData>
+                <bpsim:Scenario xsi:type="bpsim:Scenario" id="default" name="Simulationscenario">
+                    <bpsim:ScenarioParameters xsi:type="bpsim:ScenarioParameters" baseTimeUnit="min"/>
+                    <bpsim:ElementParameters xsi:type="bpsim:ElementParameters" elementRef="_DA2082ED-3169-46E9-A887-7E0995C87CEB" id="_pLzOabrbEealcIOwN0JulA">
+                        <bpsim:ControlParameters xsi:type="bpsim:ControlParameters">
+                            <bpsim:Probability xsi:type="bpsim:Parameter">
+                                <bpsim:FloatingParameter value="100.0"/>
+                            </bpsim:Probability>
+                        </bpsim:ControlParameters>
+                    </bpsim:ElementParameters>
+                    <bpsim:ElementParameters xsi:type="bpsim:ElementParameters" elementRef="_D60E6277-3E62-4C54-838B-F5E79E70171E" id="_pLzOarrbEealcIOwN0JulA">
+                        <bpsim:ControlParameters xsi:type="bpsim:ControlParameters">
+                            <bpsim:Probability xsi:type="bpsim:Parameter">
+                                <bpsim:FloatingParameter value="100.0"/>
+                            </bpsim:Probability>
+                        </bpsim:ControlParameters>
+                    </bpsim:ElementParameters>
+                    <bpsim:ElementParameters xsi:type="bpsim:ElementParameters" elementRef="_F6B61269-D793-485A-B5E3-7B84373150F2" id="_pLzOa7rbEealcIOwN0JulA">
+                        <bpsim:TimeParameters xsi:type="bpsim:TimeParameters">
+                            <bpsim:ProcessingTime xsi:type="bpsim:Parameter">
+                                <bpsim:UniformDistribution max="10.0" min="5.0"/>
+                            </bpsim:ProcessingTime>
+                        </bpsim:TimeParameters>
+                    </bpsim:ElementParameters>
+                    <bpsim:ElementParameters xsi:type="bpsim:ElementParameters" elementRef="_0B159F0B-85BB-48F4-BEDD-4CCCDBFE1618" id="_pLzObLrbEealcIOwN0JulA">
+                        <bpsim:TimeParameters xsi:type="bpsim:TimeParameters">
+                            <bpsim:ProcessingTime xsi:type="bpsim:Parameter">
+                                <bpsim:UniformDistribution max="10.0" min="5.0"/>
+                            </bpsim:ProcessingTime>
+                        </bpsim:TimeParameters>
+                        <bpsim:CostParameters xsi:type="bpsim:CostParameters">
+                            <bpsim:UnitCost xsi:type="bpsim:Parameter">
+                                <bpsim:FloatingParameter value="0.0"/>
+                            </bpsim:UnitCost>
+                        </bpsim:CostParameters>
+                    </bpsim:ElementParameters>
+                    <bpsim:ElementParameters xsi:type="bpsim:ElementParameters" elementRef="processStartEvent" id="_pLzObbrbEealcIOwN0JulA">
+                        <bpsim:TimeParameters xsi:type="bpsim:TimeParameters">
+                            <bpsim:ProcessingTime xsi:type="bpsim:Parameter">
+                                <bpsim:UniformDistribution max="10.0" min="5.0"/>
+                            </bpsim:ProcessingTime>
+                        </bpsim:TimeParameters>
+                        <bpsim:ControlParameters xsi:type="bpsim:ControlParameters">
+                            <bpsim:Probability xsi:type="bpsim:Parameter">
+                                <bpsim:FloatingParameter value="100.0"/>
+                            </bpsim:Probability>
+                        </bpsim:ControlParameters>
+                    </bpsim:ElementParameters>
+                </bpsim:Scenario>
+            </bpsim:BPSimData>
+        </bpmn2:extensionElements>
+        <bpmn2:source>_pLzOYLrbEealcIOwN0JulA</bpmn2:source>
+        <bpmn2:target>_pLzOYLrbEealcIOwN0JulA</bpmn2:target>
+    </bpmn2:relationship>
+</bpmn2:definitions>
