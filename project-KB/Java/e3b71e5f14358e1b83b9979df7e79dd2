diff --git a/core/src/main/java/io/undertow/server/handlers/resource/DirectoryUtils.java b/core/src/main/java/io/undertow/server/handlers/resource/DirectoryUtils.java
index 1ccc39354f..1616f39d24 100644
--- a/core/src/main/java/io/undertow/server/handlers/resource/DirectoryUtils.java
+++ b/core/src/main/java/io/undertow/server/handlers/resource/DirectoryUtils.java
@@ -129,14 +129,16 @@ public static StringBuilder renderDirectoryListing(String path, Resource resourc
         if (parent != null) {
             i++;
             builder.append("<tr class='odd'><td><a class='icon up' href='").append(parent).append("'>[..]</a></td><td>");
-            builder.append(format.format(resource.getLastModified())).append("</td><td>--</td></tr>\n");
+            builder.append(format.format((resource.getLastModified() == null ? new Date(0L) : resource.getLastModified())))
+                    .append("</td><td>--</td></tr>\n");
         }
 
         for (Resource entry : resource.list()) {
             builder.append("<tr class='").append((++i & 1) == 1 ? "odd" : "even").append("'><td><a class='icon ");
             builder.append(entry.isDirectory() ? "dir" : "file");
             builder.append("' href='").append(path).append(entry.getName()).append("'>").append(entry.getName()).append("</a></td><td>");
-            builder.append(format.format(entry.getLastModified())).append("</td><td>");
+            builder.append(format.format((entry.getLastModified() == null) ? new Date(0L) : entry.getLastModified()))
+                    .append("</td><td>");
             if (entry.isDirectory()) {
                 builder.append("--");
             } else {
diff --git a/core/src/main/java/io/undertow/server/handlers/resource/PathResource.java b/core/src/main/java/io/undertow/server/handlers/resource/PathResource.java
index 6750c6d4fa..79fb76beea 100644
--- a/core/src/main/java/io/undertow/server/handlers/resource/PathResource.java
+++ b/core/src/main/java/io/undertow/server/handlers/resource/PathResource.java
@@ -57,6 +57,9 @@ public String getPath() {
     @Override
     public Date getLastModified() {
         try {
+            if (Files.isSymbolicLink(file) && Files.notExists(file)) {
+                return null;
+            }
             return new Date(Files.getLastModifiedTime(file).toMillis());
         } catch (IOException e) {
             throw new RuntimeException(e);
@@ -257,6 +260,9 @@ public void onException(HttpServerExchange exchange, Sender sender, IOException
     @Override
     public Long getContentLength() {
         try {
+            if (Files.isSymbolicLink(file) && Files.notExists(file)) {
+                return null;
+            }
             return Files.size(file);
         } catch (IOException e) {
             throw new RuntimeException(e);
diff --git a/core/src/test/java/io/undertow/server/handlers/file/FileHandlerIndexTestCase.java b/core/src/test/java/io/undertow/server/handlers/file/FileHandlerIndexTestCase.java
index d6b7812fc7..101aea2138 100644
--- a/core/src/test/java/io/undertow/server/handlers/file/FileHandlerIndexTestCase.java
+++ b/core/src/test/java/io/undertow/server/handlers/file/FileHandlerIndexTestCase.java
@@ -20,8 +20,12 @@
 
 import java.io.IOException;
 import java.net.URISyntaxException;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
 
 import io.undertow.server.handlers.CanonicalPathHandler;
 import io.undertow.server.handlers.PathHandler;
@@ -73,11 +77,16 @@ public void testWelcomeFile() throws IOException, URISyntaxException {
     public void testDirectoryIndex() throws IOException, URISyntaxException {
         TestHttpClient client = new TestHttpClient();
         Path rootPath = Paths.get(getClass().getResource("page.html").toURI()).getParent();
+        Path badSymlink = null;
         try {
             DefaultServer.setRootHandler(new PathHandler()
                             .addPrefixPath("/path", new ResourceHandler(new PathResourceManager(rootPath, 10485760))
                                     .setDirectoryListingEnabled(true)));
 
+            badSymlink = rootPath.resolve("tmp2");
+            Path badSymlinkTarget = rootPath.resolve("/tmp2");
+            Files.createSymbolicLink(badSymlink, badSymlinkTarget);
+
             HttpGet get = new HttpGet(DefaultServer.getDefaultServerURL() + "/path");
             HttpResponse result = client.execute(get);
             Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
@@ -93,9 +102,15 @@ public void testDirectoryIndex() throws IOException, URISyntaxException {
             headers = result.getHeaders("Content-Type");
             Assert.assertEquals("text/html; charset=UTF-8", headers[0].getValue());
             Assert.assertTrue(response, response.contains("page.html"));
-
+            Assert.assertTrue(response, response.contains("tmp2"));
+            // All invalid symlinks have their date set to epoch
+            SimpleDateFormat format = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss", Locale.US);
+            Assert.assertTrue(response, response.contains(format.format((new Date(0L)))));
         } finally {
             client.getConnectionManager().shutdown();
+            if (badSymlink != null) {
+                Files.deleteIfExists(badSymlink);
+            }
         }
     }
 }
