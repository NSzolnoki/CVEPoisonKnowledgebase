diff --git a/src/main/org/codehaus/groovy/ast/tools/GeneralUtils.java b/src/main/org/codehaus/groovy/ast/tools/GeneralUtils.java
index fc8f78a7209..feec3aa6cf1 100644
--- a/src/main/org/codehaus/groovy/ast/tools/GeneralUtils.java
+++ b/src/main/org/codehaus/groovy/ast/tools/GeneralUtils.java
@@ -395,7 +395,7 @@ public static Set<ClassNode> getInterfacesAndSuperInterfaces(ClassNode type) {
         }
         ClassNode next = type;
         while (next != null) {
-            Collections.addAll(res, next.getInterfaces());
+            res.addAll(next.getAllInterfaces());
             next = next.getSuperClass();
         }
         return res;
diff --git a/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy b/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy
index 9b28d928091..cd12aa32355 100644
--- a/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy
+++ b/src/test/org/codehaus/groovy/transform/traitx/TraitASTTransformationTest.groovy
@@ -2258,6 +2258,22 @@ d.foo()
         assert err.contains("class 'C' implements trait 'B' but does not implement self type interface 'java.io.Serializable'")
     }
 
+    void testClassDoesNotImplementSelfTypeDefinedInInheritedTrait() {
+        def err = shouldFail '''
+            import groovy.transform.SelfType
+
+            interface Self { def bar() }
+            @SelfType(Self)
+            trait Trait {
+                def foo() { bar() }
+            }
+            interface Middle extends Trait { }
+            class Child implements Middle { }
+            new Child().foo()
+        '''
+        assert err.contains("class 'Child' implements trait 'Trait' but does not implement self type interface 'Self'")
+    }
+
     void testClassDoesNotImplementSelfTypeUsingAbstractClass() {
         def err = shouldFail '''
         import groovy.transform.SelfType
