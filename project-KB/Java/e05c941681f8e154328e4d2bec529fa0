diff --git a/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java b/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java
index c0e85af718..9fcecfb0ba 100644
--- a/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java
+++ b/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java b/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java
index c9cf980aae..bfe3eb3625 100644
--- a/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java
+++ b/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java
@@ -286,21 +286,20 @@ public void testCheckoutLimitWithFailures() throws Exception {
 		final com.rabbitmq.client.Connection mockConnection = mock(com.rabbitmq.client.Connection.class);
 		Channel mockChannel1 = mock(Channel.class);
 		final AtomicBoolean brokerDown = new AtomicBoolean();
+
 		doAnswer(i -> {
 			if (brokerDown.get()) {
 				throw new AmqpConnectException(null);
 			}
 			return mockConnection;
-		}).when(mockConnectionFactory).newConnection(any(ExecutorService.class), anyString());
+		}).when(mockConnectionFactory).newConnection(any(ExecutorService.class));
+
 		when(mockConnection.createChannel()).thenReturn(mockChannel1);
-		doAnswer(i -> {
-			return !brokerDown.get();
-		}).when(mockConnection).isOpen();
+
+		doAnswer(i -> !brokerDown.get()).when(mockConnection).isOpen();
 
 		// Called during physical close
-		doAnswer(i -> {
-			return !brokerDown.get();
-		}).when(mockChannel1).isOpen();
+		doAnswer(i -> !brokerDown.get()).when(mockChannel1).isOpen();
 
 		CachingConnectionFactory ccf = new CachingConnectionFactory(mockConnectionFactory);
 		ccf.setChannelCacheSize(1);
