diff --git a/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java b/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java
index 1d203226648..50e02a59ef1 100644
--- a/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java
+++ b/ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java
@@ -270,7 +270,6 @@ public class ClusterImpl implements Cluster {
   private volatile boolean svcHostsLoaded = false;
 
   private volatile Multimap<String, String> serviceConfigTypes;
-  private Map<String, DesiredConfig> cachedDesiredConfigs;
 
   /**
    * Used to publish events relating to cluster CRUD operations.
@@ -2186,7 +2185,6 @@ public ServiceConfigVersionResponse addDesiredConfig(String user, Set<Config> co
       if (configs == null) {
         return null;
       }
-      cachedDesiredConfigs = null; //clear desired configs cache
 
       Iterator<Config> configIterator = configs.iterator();
 
@@ -2230,14 +2228,10 @@ public Map<String, Set<DesiredConfig>> getAllDesiredConfigVersions() {
    */
   @Override
   public Map<String, DesiredConfig> getDesiredConfigs() {
-    //test desired configs caching as this method is called too frequently
-    if (cachedDesiredConfigs != null) {
-      return new HashMap<>(cachedDesiredConfigs);
-    }
 
     Map<String, Set<DesiredConfig>> activeConfigsByType = getDesiredConfigs(false);
 
-    cachedDesiredConfigs = Maps.transformEntries(
+    return Maps.transformEntries(
         activeConfigsByType,
         new Maps.EntryTransformer<String, Set<DesiredConfig>, DesiredConfig>() {
           @Override
@@ -2245,8 +2239,6 @@ public DesiredConfig transformEntry(@Nullable String key, @Nullable Set<DesiredC
             return value.iterator().next();
           }
         });
-
-    return new HashMap<>(cachedDesiredConfigs);
   }
 
 
@@ -2264,7 +2256,7 @@ private Map<String, Set<DesiredConfig>> getDesiredConfigs(boolean allVersions) {
       Map<String, Set<DesiredConfig>> map = new HashMap<>();
       Collection<String> types = new HashSet<>();
 
-      for (ClusterConfigMappingEntity e : clusterDAO.getClusterConfigMappingEntitiesByCluster(getClusterId())) {
+      for (ClusterConfigMappingEntity e : getClusterEntity().getConfigMappingEntities()) {
         if (allVersions || e.isSelected() > 0) {
           DesiredConfig c = new DesiredConfig();
           c.setServiceName(null);
@@ -2425,7 +2417,6 @@ public ServiceConfigVersionResponse setServiceConfigVersion(String serviceName,
 
     clusterGlobalLock.writeLock().lock();
     try {
-      cachedDesiredConfigs = null; //clear desired configs cache
       ServiceConfigVersionResponse serviceConfigVersionResponse = applyServiceConfigVersion(
           serviceName, version, user, note);
       configHelper.invalidateStaleConfigsCache();
@@ -2656,6 +2647,9 @@ void selectConfig(String type, String tag, String user) {
     entity.setType(type);
     entity.setTag(tag);
     clusterDAO.persistConfigMapping(entity);
+
+    clusterEntity.getConfigMappingEntities().add(entity);
+    clusterDAO.merge(clusterEntity);
   }
 
   @Transactional
@@ -3309,7 +3303,6 @@ public void removeConfigurations(StackId stackId) {
    * Caches all of the {@link ClusterConfigEntity}s in {@link #allConfigs}.
    */
   private void cacheConfigurations() {
-    cachedDesiredConfigs = null; //clear desired configs cache
     ClusterEntity clusterEntity = getClusterEntity();
     if (clusterEntity != null) {
       if (null == allConfigs) {
